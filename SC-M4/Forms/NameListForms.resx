<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//+qA93Z0Dzb2M6I3NfP1dzX
        z7vd2dA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN7T0xfd2NBi3NfPrt3Yz/Tc2M//3NjP/9zY
        z//c2M//3NjP/9zZ0Mfc2M1IAAAAAAAAAAAAAAAAAAAAAAAAAADa2tIi3NjQotzYz/nc2M//3NjP/9zX
        zv/X0sn/2dXL/9zYz//c2M//3NjP/9zXz7vd2dA8AAAAAAAAAAAAAAAAAAAAAAAAAADe09MX29TKlM/I
        uvvWupP/465p/+Cyef/Qxrb/2NPK/9zYz//c2M/u3NnPpt3X0i0AAAAAAAAAAAAAAAD/jhwJ8pUhTfOW
        IZnylyTp85Yh//OWIf/zliH/8Z02+9+zetzZz8Bl0dHRCwAAAAAAAAAAAAAAAAAAAAD0mCEv85Yh2/OW
        If/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh4vOXIGf/qisGAAAAAAAAAAAAAAAAAAAAAP+q
        KwbzliBo8JQh4+SHHf/VeRr/xnUf/8p1Hf/jhx7/85Uh//OWIf/zliH/85Yh2/SWIS4AAAAAAAAAAAAA
        AAAAAAAAAP//AmPCoEOTnmHVasCY/DrczP9J07z/qJVO/815HvztkSC585YhZvWTHRoAAAAAAAAAAAAA
        AAA53cwtOdzMpjncze453M3/OdzN/znczf853M3/OdzN/znczf853M34ON3NlTzdzB4AAAAAAAAAAAAA
        AAAAAAAAAAAAADrbzEY63M3DOdzN/znczf853M3/OdzN/znczf853M3/OdzN/znczf853M35ONzNmjza
        yyIAAAAAAAAAAAAAAAAAAAAAAP//ATjbzU053M3GOdzN/znczf853M3/OdzN/znczf853M3uOd3Oqjrc
        zWY33sgXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADjcyzs53M24ONvN0DrczYQ42sw3AP//AgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA/H8AAOAfAADABwAA8AMAAPAfAADADwAA8AMAAPgP
        AADADwAA4AMAAPgHAAD+PwAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//6oD3dnQPNvYzojc18/V3NfPu9zXzzoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOHS0hHb2M9V3NjQotzYz+7c2M//3NjP/9zYz//c2M//3NjP/9vZ
        z7Pb1845AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA2trSIt3Yz2/c18+73NjP+dzYz//c2M//3NjP/9zYz//c2M//3NjP/9zY
        z//c2M//3NjP/9zYz//b2c+z29bNOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAN/fvwjc2M1I3djPldzYz+Hc2M//3NjP/9zYz//c2M//3NjP/9zYz//c2M//3NjP/9zY
        z//c2M//3NjP/9zYz//c2M//3NjP/9zYz//c2M//3NjPv9razj4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA39+/CN3Y0Hfc2M/p3NjP/9zYz//c2M//3NjP/9zYz//c2M//3NjP/9zY
        z//c2M//3NjP/9zYz//c2M//3NjP/9zYz//c2M//3NjP/9zYz//c2M//3NjP/t3Yz6re2M0uAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOPjxgnd2NB33NjP6tzYz//c2M//3NjP/9zY
        z//c2M//3NjP/9vXz//V0Mb/zsi9/8/Kvv/a1cz/3NjP/9zYz//c2M//3NjP/9zYz//c2M//3NjP/9zY
        z/7d2M+q3dfSLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADV1dUG3djOaNzY
        zuLc2M//2tXM/9POw//Mxrr/xb+x/8W+sP/Pu5//y72m/8a/sf/Pyb7/2tXM/9zYz//c2M//3NjP/9zY
        z//c2M//3NjP/9zYz//c2M//3NnPptXV1QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA5szMCtTNw5XIwbL9xr6w/9O8m//jsXL/7aJD//OWIv/ymiz/47Fx/8u9qP/Gv7H/z8m+/9rV
        zP/c2M//3NjP/9zYz//c2M/h3NnPmdvX0U3f378IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD/jhwJ8pUhTfKaKaHxmSvz85Yh//OWIf/zliH/85Yh//OWIf/zliH/8por/+Ox
        cv/Kvqj/x7+y/9TPxdvb18+A3NfNM////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPeZIh7zliFm9JYhs/OWIffzliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OW
        If/zliH/85Yh//OYJffvnTaS8pkmFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA6pUrDPSVIIfzliHZ85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OW
        If/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH485chlfaVIx0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA85UfKfOWIarzliH985Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OW
        If/zliH/85Yh//KWIP/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh9fSWIojzlyMWAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPKWISfzliGq85Yh/fOWIf/zliH/85Yh//OW
        If/xlCD/4oYd/9N3Gf/EaRb/xmwW/+CDHP/yliD/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OW
        Ifb0liKI85cjFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD3mSIe85Yglu2Q
        H/negh3/z3IY/8JmFf/BZhX/wXUi/6SVUP+xiD3/wWYV/8ZsFv/ggxz/8pYg//OWIf/zliH/85Yh//OW
        If/zliH/85Yh//OWIdn0lSCH6pUrDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA2nsZPs12G9q+eyn+mp5d/1XMrv853M3/OdzN/znczf9cyKb/uIU2/8FnFf/HbBf/4IMc//KW
        IP/zliH985YhzPOVIoD1liMz//8AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAPN3MHjrczWY5282zOdzN9znczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/XMil/7iG
        NfzLcRjo2H0akfWTHRoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/
        /wI33M0zOtvNgDrczcw53M3+OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znc
        zf853M3/OdzN/znczd053M5eK9XVBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABA1dUMOdzMpjnczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znc
        zf853M3/OdzN/znczf853M3/OdzN/znczf853M7oONvOcjPmzAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAON3ORDnczsQ53M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znc
        zf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN3Tnczl4r1dUGAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADvbzTg53M23OdzN/znczf853M3/OdzN/znc
        zf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znc
        zug4285yM+bMCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA43c5EOdzOxDnc
        zf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znc
        zf853M3dONzOkTjdzkQr1dUGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAON3ORDnczsQ53M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/znczf853M3/OdzN/Dnc
        zsQ63c53N9vOKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADjdzkQ53M7EOdzN/znczf853M3/OdzN/znczf853M3uOd3Oqjnc
        zl484dIRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA72804OdzNtzjbzdA63M2EONrMNwD/
        /wIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////H///+Af//8AB//wAAH/8AAAf/wA
        AB//AAAH/4AAH//AAP/+AAP/4AAA//AAAD/8AAAP/wAAB//AAD//gAH/+AAD/+AAAP/4AAA//gAAD/+A
        AA//4AD///gH///+P///////////////////////
</value>
  </data>
</root>